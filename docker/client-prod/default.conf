# nginx Configuration File
# https://wiki.nginx.org/Configuration
# https://www.digitalocean.com/community/tutorials/understanding-the-nginx-configuration-file-structure-and-configuration-contexts
# https://wiki.debian.org/Nginx/DirectoryStructure
# It's advised to instead add customizations underneath of the conf.d/ directory which is described below

# Run as a less privileged user for security reasons.
# error
# 2020/08/21 16:48:57 [emerg] 1#1: "user" directive is not allowed here in /etc/nginx/conf.d/default.conf:8
user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Specify where the PID of nginx will be written
pid /nginx.pid;

# Run in foreground
daemon off;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

events {
	# The maximum number of simultaneous connections that can be opened by
	# a worker process.
	worker_connections 1024;
}

# add_header Cache-Control "No-Store" always;
# add_header Cache-Control "max-age=-1" always;


http {
	# Includes mapping of file name extensions to MIME types of responses
	# and defines the default type.
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Name servers used to resolve names of upstream servers into addresses.
	# It's also needed when using tcpsocket and udpsocket in Lua modules.
	#resolver 208.67.222.222 208.67.220.220;

	# Don't tell nginx version to clients.
	server_tokens off;

	# Specifies the maximum accepted body size of a client request, as
	# indicated by the request header Content-Length. If the stated content
	# length is greater than this size, then the client receives the HTTP
	# error code 413. Set to 0 to disable.
	client_max_body_size 1m;

  # https://docs.microsoft.com/en-us/azure/container-instances/container-instances-container-group-ssl
  # Optimize TLS/SSL by caching session parameters for 10 minutes. 
  # This cuts down on the number of expensive TLS/SSL handshakes.
  # The handshake is the most CPU-intensive operation, and by default 
  # it is re-negotiated on every new/parallel connection.
  # By enabling a cache (of type "shared between all Nginx workers"), 
  # we tell the client to re-use the already negotiated state.
  # Further optimization can be achieved by raising keepalive_timeout, 
  # but that shouldn't be done unless you serve primarily HTTPS.
	
  # Timeout for keep-alive connections. Server will close connections after
	# this time.
  keepalive_timeout 65;

	# Sendfile copies data between one FD and other from within the kernel,
	# which is more efficient than read() + write().
	sendfile on;

	# Don't buffer data-sends (disable Nagle algorithm).
	# Good for sending frequent small bursts of data in real time.
	tcp_nodelay on;

	# Causes nginx to attempt to send its HTTP response head in one packet,
	# instead of using partial frames.
	#tcp_nopush on;

	# Enable gzipping of responses.
	gzip on;

	# Set the Vary HTTP header as defined in the RFC 2616.
	gzip_vary on;

	# Enable checking the existence of precompressed files.
	#gzip_static on;

	# Specifies the main log format.
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';

	# Sets the path, format, and configuration for a buffered log write.
	access_log /var/log/nginx/access.log main;
  
}
